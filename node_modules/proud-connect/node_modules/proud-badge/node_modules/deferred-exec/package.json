{
  "name": "deferred-exec",
  "description": "Deferred based tool to run exec commands",
  "version": "0.3.1",
  "homepage": "https://github.com/danheberden/deferred-exec",
  "author": {
    "name": "Dan Heberden",
    "email": "danheberden@gmail.com",
    "url": "http://danheberden.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/danheberden/deferred-exec.git"
  },
  "bugs": {
    "url": "https://github.com/danheberden/deferred-exec/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/danheberden/deferred-exec/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/deferred-exec",
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "lodash": ">= 0.7.0",
    "underscore.deferred": ">= 0.2.0",
    "underscore.string": ">= 2.3.0"
  },
  "devDependencies": {
    "grunt": "~0.3.12"
  },
  "keywords": [],
  "readme": "# deferred-exec\n\nDeferred based tool to run exec commands. Lets you use exec, execFile and spawn in a sane way.\n\nVersion: 0.3.1\n\n## Installing\n\nInstall the module with: `npm install deferred-exec` or add it to your project's `package.json` file.\n\nYou can also clone this repo and `npm install folderOfClonedRepo` to get a branch or development copy.\n\n## Using\n\nAll calls return a promise, which means it's easy to do stuff when they complete or fail:\n\n```javascript\nvar dexec = require( 'deferred-exec' );\n\ndexec( 'echo \"yay\"' )\n  .done( function( stdout, stderr, command ) {\n    console.log( stdout ); // logs \"yay\"\n  })\n  .fail( function( error ) {\n    console.log( \"it didn't work :( got code:\", error.code );\n  });\n```\n\nSince they are deferreds, you can pass them around in your code:\n\n```javascript\nvar dexec = require( 'deferred-exec' );\n\nvar command = dexec( 'echo \"gotcha\"' );\n\ndoSomethingWithCommand( command );\n\n// meanwhile, in some other part of your application\nfunction doSomethingWithCommand( command ) {\n  command.done( function( stdout, stderr, command ) {\n    console.log( 'just ran', command, 'and got', stdout );\n  });\n}\n```\n\nUse [Underscore.Deferred](https://github.com/wookiehangover/underscore.deferred) if you want to use\n`_.when` to group multiple commands. (Note: you can use underscore.deferred with [lodash](https://github.com/bestiejs/lodash))\n\n```javascript\nvar dexec = require( 'deferred-exec' );\n\n// require and mixin lodash with _.deferred\nvar _ = require( 'lodash' );\n_.mixin( require( 'underscore.deferred' ) );\n\nvar commandA = dexec( 'ls /etc' );\nvar commandB = dexec( 'echo \"hi\"' );\n\n// when both commands succeed\n_.when( commandA, commandB )\n  .done( function( a, b ){\n    console.log( 'commandA output:', a[0] );\n    console.log( 'commandB output:', b[0] );\n  });\n```\n\nOr run a file using `.file` \n\n```javascript\nvar dexec = require( 'deferred-exec' );\n\ndexec.file( './someFile.sh' )\n  .done( function( stdout, stderr, fileName ) {\n    console.log( 'ran', fileName, 'got', stdout );\n  });\n```\n\nOr take advantage of spawning a new progress and getting its output during execution:\n\n```javascript\nvar dexec = require( 'deferred-exec' );\n\ndexec.spawn( 'cat', [ '/var/log/syslog' ] )\n  .progress( function( stdout, stderr, command ) {\n    /* this function will get called with every piece of \n       data from the returne result */\n   })\n   .done( function( stdout, stderr, command ) {\n     /* all done! total value's available of course */\n   });\n```\n  \n\n## Reference\n\nFor `deferred-exec` details see [child_process.exec](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) for available options\n\nFor `deferred-exec.file` details see [child_process.execFile](http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback)\nfor available options\n\nFor `deferred-exec.spawn` details see [child_progress.spawn](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) for available options\n\n## Options\n\nAll methods support an options object. `deferred-exec` adds two possible options to this object:\n\n#### trim\n\nThis defaults to `true`, which trims the last bit of trailing while space (a new line) from the output.\nSet to `false` if you don't want your final output trimmed.\n\n#### encoding\n\nThe default is `utf8`, so if you want one of the other types supported you can specify it here.\n\n## API Quick Reference\n\nAssuming `var dexec = require( 'deferred-exec' ):\n\n#### dexec( _String_ command, _Object_ options )\n\n#### dexec.execFile( _String_ filename, _Array_ arguments, _Object_ options )\n\n#### dexec.spawn( _String_ command, _Array_ arguments, _Object_ options )\n\nAll methods return a promise. Check out the [Deferred Documentation](http://api.jquery.com/category/deferred-object/). \nOnly `.spawn` utilizes the `notify()` method.\n\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/cowboy/grunt).\n\n## License\nCopyright (c) 2012 Dan Heberden  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "deferred-exec@0.3.1",
  "_from": "deferred-exec@~0.3.1"
}
