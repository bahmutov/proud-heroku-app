{
  "name": "check-types",
  "version": "1.1.0",
  "description": "A tiny library for checking arguments and throwing exceptions.",
  "homepage": "https://github.com/philbooth/check-types.js",
  "bugs": {
    "url": "https://github.com/philbooth/check-types.js/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com",
    "url": "https://github.com/philbooth"
  },
  "main": "./src/check-types.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/check-types.js.git"
  },
  "keywords": [
    "types",
    "type-checking",
    "duck-typing",
    "arguments",
    "parameters"
  ],
  "devDependencies": {
    "jshint": "2.2.x",
    "mocha": "1.13.x",
    "chai": "1.8.x",
    "uglify-js": "2.4.x"
  },
  "scripts": {
    "lint": "./node_modules/.bin/jshint ./src/check-types.js --config config/jshint.json",
    "test": "./node_modules/.bin/mocha --ui tdd --reporter spec --colors ./test/check-types.js",
    "minify": "./node_modules/.bin/uglifyjs ./src/check-types.js --compress --mangle --output ./src/check-types.min.js"
  },
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com",
      "url": "https://github.com/philbooth"
    },
    {
      "name": "Rowan Manning",
      "url": "https://github.com/rowanmanning"
    },
    {
      "name": "Forbes Lindesay",
      "url": "https://github.com/ForbesLindesay"
    },
    {
      "name": "Fabrizio Moscon",
      "url": "https://github.com/fabriziomoscon"
    },
    {
      "name": "Marc-Olivier Ricard",
      "url": "https://github.com/ricardmo"
    },
    {
      "name": "Gleb Bahmutov",
      "url": "https://github.com/bahmutov"
    }
  ],
  "readme": "# check-types.js\n\n[![Build status][ci-image]][ci-status]\n\nA tiny JavaScript library\nfor checking arguments\nand throwing exceptions.\n\n* [Why would I want that?](#why-would-i-want-that)\n* [How tiny is it?](#how-tiny-is-it)\n* [How do I install it?](#how-do-i-install-it)\n* [How do I use it?](#how-do-i-use-it)\n    * [Loading the library](#loading-the-library)\n    * [Calling the exported functions](#calling-the-exported-functions)\n        * [String functions](#string-functions)\n        * [Number functions](#number-functions)\n        * [Function functions](#function-functions)\n        * [Array functions](#array-functions)\n        * [Date functions](#date-functions)\n        * [Object functions](#object-functions)\n        * [Modifiers](#modifiers)\n        * [Batch operations](#batch-operations)\n        * [Some examples](#some-examples)\n* [What changed from 0.x to 1.x?](#what-changed-from-0x-to-1x)\n* [How do I set up the build environment?](#how-do-i-set-up-the-build-environment)\n* [What license is it released under?](#what-license-is-it-released-under)\n\n## Why would I want that?\n\nWriting explicit conditions\nin your functions\nfor checking arguments\nand throwing exceptions\nis a task that\nswiftly becomes tiresome\nand adds complexity\nto your codebase.\n\nThe purpose of check-types.js\nis to remove this burden\nfrom JavaScript application developers\nin an efficient and robust manner,\nabstracted by a simple API.\n\n## How tiny is it?\n\n11.7 kb unminified with comments, 2.7 kb minified, 1 kb minified + gzipped.\n\n## How do I install it?\n\nAny of the following will do:\n\n```\nnpm install check-types\n\njam install check-types\n\nbower install check-types\n\ncomponent install philbooth/check-types.js\n\ngit clone git@github.com:philbooth/check-types.js.git\n```\n\n## How do I use it?\n\n### Loading the library\n\nIf you are running in\n[Node.js][node],\n[Browserify]\nor another CommonJS-style\nenvironment,\nyou can `require`\ncheck-types.js like so:\n\n```javascript\nvar check = require('check-types');\n```\n\nIt also the supports\nthe AMD-style format\npreferred by [Require.js][require]:\n\n```javascript\nrequire.config({\n    paths: {\n        check: 'check-types.js/src/check-types'\n    }\n});\n\nrequire([ 'check' ], function (check) {\n});\n```\n\nIf you are\nincluding check-types.js\nwith an HTML `<script>` tag,\nor neither of the above environments\nare detected,\ncheck-types.js will just export its interface globally\nas `check`.\n\n### Calling the exported functions\n\nOnce you have loaded the library\nin your application,\na whole bunch of functions are available\nto call.\n\nFor the most part,\nthe exported functions\nare broadly split into three types.\n\n* `check.xxx(thing)`:\n  These functions are predicates,\n  returning true or false\n  depending on the type and value of `thing`.\n\n* `check.maybe.xxx(thing)`:\n  The maybe modifier\n  returns `true` if `thing` is `null` or `undefined`,\n  otherwise it returns the result\n  of the equivalent predicate.\n\n* `check.verify.xxx(thing, message)`:\n  The verify modifier\n  calls the equivalent predicate\n  and throws an `Error`\n  if the result is `false`.\n  It can also be applied\n  to maybe modifiers\n  using the form\n  `check.verify.maybe.xxx(thing, message)`.\n\nAdditionally, there are some batch operations\nthat allow you to test maps\nof many predicates at once.\nThese are implemented by\n`check.map`,\n`check.any` and\n`check.every`.\n\n#### String functions\n\n* `check.string(thing)`:\n  Returns `true`\n  if `thing` is a string,\n  `false` otherwise.\n\n* `check.unemptyString(thing)`:\n  Returns `true`\n  if `thing` is a non-empty string,\n  `false` otherwise.\n\n* `check.webUrl(thing)`:\n  Returns `true`\n  if `thing` is an HTTP or HTTPS URL,\n  `false` otherwise.\n\n* `check.length(thing, value)`:\n  Returns `true`\n  if `thing` has a length property\n  that equals `value`,\n  `false` otherwise.\n\n#### Number functions\n\n* `check.number(thing)`:\n  Returns `true`\n  if `thing` is a number,\n  `false` otherwise.\n  In this case,\n  `NaN` is not considered a number.\n\n* `check.positiveNumber(thing)`:\n  Returns `true` if `thing` is a number\n  greater than zero,\n  `false` otherwise.\n\n* `check.negativeNumber(thing)`:\n  Returns `true`\n  if `thing` is a number\n  less than zero,\n  `false` otherwise.\n\n* `check.oddNumber(thing)`:\n  Returns `true`\n  if `thing` is an odd number,\n  `false` otherwise.\n\n* `check.evenNumber(thing)`:\n  Returns `true`\n  if `thing` is an even number,\n  `false` otherwise.\n\n#### Function functions\n\n* `check.fn(thing)`:\n  Returns `true`\n  if `thing` is a function,\n  `false` otherwise.\n\n#### Array functions\n\n* `check.array(thing)`:\n  Returns `true`\n  if `thing` is an array,\n  `false` otherwise.\n\n* `check.length(thing, value)`:\n  Returns `true`\n  if `thing` has a length property\n  that equals `value`,\n  `false` otherwise.\n\n#### Date functions\n\n* `check.date(thing)`:\n  Returns `true`\n  if `thing` is a date,\n  `false` otherwise.\n\n#### Object functions\n\n* `check.object(thing)`:\n  Returns `true`\n  if `thing` is a non-null, non-array, non-date object,\n  `false` otherwise.\n\n* `check.emptyObject(thing)`:\n  Returns `true`\n  if `thing` is an empty object,\n  `false` otherwise.\n\n* `check.instance(thing, prototype)`:\n  Returns `true`\n  if `thing` is an instance of `prototype`,\n  `false` otherwise.\n\n* `check.like(thing, duck)`:\n  Duck-typing checker.\n  Returns `true`\n  if `thing` has all of the properties of `duck`,\n  `false` otherwise.\n  If either argument is not an object,\n  an exception is thrown.\n\n#### Modifiers\n\n* `check.maybe.xxx(...)`:\n  Returns `true`\n  if `thing` is `null` or `undefined`,\n  otherwise it propagates\n  the returne value\n  from its predicate.\n\n* `check.verify.xxx(...)` / `check.verify.maybe.xxx(...)`:\n  Throws an `Error`\n  if the predicate returns false.\n  The last argument\n  is an optional message\n  to be set on the `Error` instance.\n\n#### Batch operations\n\n* `check.map(things, functions)`:\n  Maps each predicate from the `functions` object\n  to the corresponding value from `things`,\n  returning the hash of results.\n  Similar to `like`\n  but using functions instead of values.\n  Supports nested objects.\n\n* `check.every(predicateResults)`:\n  Returns `true`\n  if all properties of the `predicateResults` object are `true`,\n  `false` otherwise.\n\n* `check.any(predicateResults)`:\n  Returns `true`\n  is any property of the `predicateResults` object is `true`,\n  `false` otherwise.\n\n#### Some examples\n\n```javascript\ncheck.object(null);\n// Returns false\n```\n\n```javascript\ncheck.maybe.object(null);\n// Returns true\n```\n\n```javascript\ncheck.verify.like({}, { foo: 'bar' }, 'Invalid object');\n// Throws new Error('Invalid object')\n```\n\n```javascript\ncheck.verify.maybe.like(undefined, { foo: 'bar' }, 'Invalid object');\n// Doesn't throw\n```\n\n```javascript\ncheck.map({\n    foo: 2,\n    bar: {\n        baz: 'qux'\n    }\n}, {\n    foo: check.oddNumber,\n    bar: {\n        baz: check.unemptyString\n    }\n});\n// Returns { foo: false, bar: { baz: true } }\n```\n\n```javascript\ncheck.every(\n    check.map({\n        foo: 0,\n        bar: ''\n    }, {\n        foo: check.number,\n        bar: check.unemptyString\n    })\n);\n// Returns false\n```\n\n```javascript\ncheck.any(\n    check.map({\n        foo: 0,\n        bar: ''\n    }, {\n        foo: check.number,\n        bar: check.unemptyString\n    })\n);\n// Returns true\n```\n\n## What changed from 0.x to 1.x?\n\nBreaking changes\nwere made to the API\nin version 1.0.0.\n\nSpecifically,\nall of the predicates\nwere renamed\nfrom `check.isXxxx`\nto `check.xxx` and\nall of the verifiers\nwere renamed\nfrom `check.verifyXxxx`\nto `check.verify.xxx`.\n\nSee the [history]\nfor more details.\n\n## How do I set up the build environment?\n\nThe build environment relies on\nNode.js,\n[NPM],\n[JSHint],\n[Mocha],\n[Chai] and\n[UglifyJS].\nAssuming that you already have Node.js and NPM set up,\nyou just need to run `npm install` to\ninstall all of the dependencies as listed in `package.json`.\n\nThe unit tests are in `test/check-types.js`.\nYou can run them with the command `npm test`.\nTo run the tests in a web browser,\nopen `test/check-types.html`.\n\n## What license is it released under?\n\n[MIT][license]\n\n[ci-image]: https://secure.travis-ci.org/philbooth/check-types.js.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/check-types.js\n[node]: http://nodejs.org/\n[browserify]: http://browserify.org/\n[require]: http://requirejs.org/\n[history]: https://github.com/philbooth/check-types.js/blob/master/HISTORY.md\n[npm]: https://npmjs.org/\n[jshint]: https://github.com/jshint/node-jshint\n[mocha]: http://visionmedia.github.com/mocha\n[chai]: http://chaijs.com/\n[uglifyjs]: https://github.com/mishoo/UglifyJS\n[license]: https://github.com/philbooth/check-types.js/blob/master/COPYING\n\n",
  "readmeFilename": "README.md",
  "_id": "check-types@1.1.0",
  "_from": "check-types@~1.1.0"
}
