{
  "author": {
    "name": "Eldar Gabdullin",
    "email": "eldargab@gmail.com"
  },
  "name": "easy-table",
  "description": "Nice text table for the CLI",
  "keywords": [
    "table",
    "text",
    "cli"
  ],
  "version": "0.2.0",
  "repository": {
    "type": "git",
    "url": "https://eldargab@github.com/eldargab/easy-table.git"
  },
  "main": "./lib/table",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "readme": "# Easy table\n\nSimple and nice utility for rendering text tables with javascript.\n\n## Usage\n\n``` javascript\nvar Table = require('easy-table');\n\nvar data = [\n    { id: 123123, desc: 'Something awesome', price: 1000.00 },\n    { id: 245452, desc: 'Very interesting book', price: 11.45},\n    { id: 232323, desc: 'Yet another product', price: 555.55 }\n]\n\nvar t = new Table;\n\ndata.forEach(function (product) {\n    t.cell('Product Id', product.id);\n    t.cell('Description', product.desc);\n    t.cell('Price, USD', product.price, Table.Number(2));\n    t.newRow();\n});\n\nconsole.log(t.toString());\n```\n\nThe script above will render:\n\n```\nProduct Id  Description            Price, USD\n----------  ---------------------  ----------\n123123      Something awesome         1000.00\n245452      Very interesting book       11.45\n232323      Yet another product        555.55\n\n```\n\n`t.printTransposed()` yields\n\n```\nProduct Id  : 245452                : 232323              : 123123\nDescription : Very interesting book : Yet another product : Something awesome\nPrice, USD  : 11.45                 : 555.55              : 1000.00\n\n```\n\nFinally `t.print()` shows just the rows you pushed and nothing more\n\n```\n245452  Very interesting book    11.45\n232323  Yet another product     555.55\n123123  Something awesome      1000.00\n\n```\n\n### How it works\n\nThe full signature of `.cell()` method is:\n\n``` javascript\nt.cell(column, value, printer, width)\n```\n\nBy default column's width is ajusted to fit the longest value, but if specified\nexplicitly it is fixed and any non-fitting cell is truncated.\n\nCell's value rendering occures in two phases. At the first phase `printer`\nfunction is called to get minimal width required to fit cell correctly, at the\nsecond phase `printer` function is called to get actual string to render with\nadditional `width` parameter supplied.\n\n``` javascript\n// Example: Coloring too big numbers in red\n\nfunction markTooBigs (val, width) {\n    if (width == null) return Table.string(val)\n    return val > 100\n        ? '\\033[31m' + String(val) + '\\033[39m'\n        : Table.string(val)\n}\n...\nt.cell('foo', 300, markTooBigs)\n```\n\n### Table.printArray(), Table.printObject()\n\nOften you just want to print an array or a simple key-value map.\n`Table.printArray()` and `Table.printObject()` help to instantiate and fill a table for such use cases.\n\n``` javascript\nvar array = [\n    {foo: 'foo1', bar: 'bar1'},\n    {foo: 'foo2', bar: 'bar2'}\n]\n\nconsole.log(Table.printArray(array))\n```\n\nyields\n\n```\nfoo   bar\n----  ----\nfoo1  bar1\nfoo2  bar2\n\n```\n\nwe can pass options to override defaut behaviour\n\n``` javascript\nTable.printArray(array, {\n    bar: {\n        name: 'Long field name',\n        printer: Table.padLeft\n    }\n})\n```\n\n```\nfoo   Long field name\n----  ---------------\nfoo1             bar1\nfoo2             bar2\n\n```\n\nor have a full control over rendering\n\n``` javascript\nTable.printArray(array, function (obj, cell) {\n    cell('foo', obj.foo)\n    cell('field', obj.bar)\n}, function (table) {\n    return table.print()\n})\n```\n\n`Table.printObj()` works in the same manner\n\n``` javascript\nvar obj = {\n    foo: 'foo',\n    bar: 'bar'\n}\n\nTable.printObj(obj)\n```\n\nyields\n\n```\nfoo : foo\nbar : bar\n```\n\n### Sorting\n\nYou can sort a table by calling `.sort()`, and optionally passing in a list of\ncolumn names to sort on (by default uses all columns), or a custom comparator\nfunction. It is also possible to specify the sort order. For example:\n\n``` javascript\nt.sort(['Price, USD|des']) // will sort in descending order\nt.sort(['Price, USD|asc']) // will sort in ascending order\nt.sort(['Price, USD']) // sorts in ascending order by default\n```\n\n### Totaling\n\nEasy table can help you to calculate and render totals:\n\n``` javascript\nt.total('Price, USD', function accumulator (sum, val, index, length) {\n    sum = sum || 0\n    sum += val\n    return index + 1 == length\n        ? sum / length\n        : sum\n}, function print (val, width) {\n    var s = 'Avg: ' + Table.Number(2)\n    return width == null\n        ? s\n        : Table.padLeft(s, width)\n})\n```\n\nyields\n\n```\nProduct Id  Description            Price, USD\n----------  ---------------------  -----------\n245452      Very interesting book        11.45\n232323      Yet another product         555.55\n123123      Something awesome          1000.00\n----------  ---------------------  -----------\n                                   Avg: 522.33\n```\n\n`total()` function also accepts printer via `printer` property of\naccumulator, so it is possible to create reusable aggregations like:\n\n``` javascript\nvar priceAvg = // some accumulator\npriceAvg.printer = // some printer\n...\nt.total('Price', 300.50, priceAvg)\n```\n\n## Installation\n\nJust install from the npm repository with:\n\n```\n$ npm install easy-table\n```\n\n## Misc\n\nEasy table now has kind of stable api and exposes many of it's internals.\nBut in any case it's better to specify strict version numbers in your modules\nespecially if you use methods or properties not covered by this readme.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Eldar Gabdullin <eldargab@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/eldargab/easy-table/issues"
  },
  "_id": "easy-table@0.2.0",
  "_from": "easy-table@~0.2.0"
}
